---
import type { MetaProps } from '../types/website';

interface Props extends MetaProps {}

const {
  title,
  description,
  url,
  image,
  type = 'website',
  author,
  publisher,
  datePublished,
  dateModified,
  keywords,
  language = 'en-US'
} = Astro.props;

// Generate Open Graph tags
const ogTags = [
  { property: 'og:title', content: title },
  { property: 'og:description', content: description },
  { property: 'og:url', content: url },
  { property: 'og:type', content: type },
  { property: 'og:locale', content: language },
];

if (image) {
  ogTags.push({ property: 'og:image', content: image });
}

if (author?.name) {
  ogTags.push({ property: 'article:author', content: author.name });
}

if (publisher?.name) {
  ogTags.push({ property: 'article:publisher', content: publisher.name });
}

if (datePublished) {
  ogTags.push({ property: 'article:published_time', content: datePublished });
}

if (dateModified) {
  ogTags.push({ property: 'article:modified_time', content: dateModified });
}

// Generate Twitter Card tags
const twitterTags = [
  { name: 'twitter:card', content: 'summary_large_image' },
  { name: 'twitter:title', content: title },
  { name: 'twitter:description', content: description },
];

if (image) {
  twitterTags.push({ name: 'twitter:image', content: image });
}

// Generate basic meta tags
const metaTags = [
  { name: 'description', content: description },
  { name: 'author', content: author?.name },
];

if (keywords && keywords.length > 0) {
  metaTags.push({ name: 'keywords', content: keywords.join(', ') });
}

// Generate article meta tags if type is article
const articleTags = type === 'article' ? [
  { name: 'article:published_time', content: datePublished },
  { name: 'article:modified_time', content: dateModified },
  { name: 'article:author', content: author?.name },
  { name: 'article:publisher', content: publisher?.name },
] : [];
---

<!-- Basic Meta Tags -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

{metaTags.map(tag => (
  <meta name={tag.name} content={tag.content} />
))}

{articleTags.map(tag => (
  <meta name={tag.name} content={tag.content} />
))}

<!-- Open Graph Tags -->
{ogTags.map(tag => (
  <meta property={tag.property} content={tag.content} />
))}

<!-- Twitter Card Tags -->
{twitterTags.map(tag => (
  <meta name={tag.name} content={tag.content} />
))}

<!-- Canonical URL -->
<link rel="canonical" href={url} />

<!-- Language -->
<html lang={language} /> 